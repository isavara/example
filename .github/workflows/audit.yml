name: Audit

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  audit:
    runs-on: rome-runner-4-label-4
    steps:
    - uses: actions/checkout@v2


    - name: Capture PR Information...
      id: pr-info
      run: |
          pr_number=${{ github.event.number }}
          echo "PR Number: $pr_number"
          pr_url=${{ github.event.pull_request.html_url }}
          echo "PR URL: $pr_url"
          pr_branch=${{ github.event.pull_request.head.ref }}
          echo "PR Branch: $pr_branch"
          repo_url=${{ github.event.repository.html_url }}
          echo "Repository URL: $repo_url"
          echo "::set-output name=pr_number::$pr_number"
          echo "::set-output name=pr_url::$pr_url"
          echo "::set-output name=pr_branch::$pr_branch"
          echo "::set-output name=repo_url::$repo_url"    

    # - name: Set up Go
    #   uses: actions/setup-go@v2
    #   with:
    #     go-version: 1.19.13

    # - name: Install golint
    #   run: go install golang.org/x/lint/golint@latest

    # - name: Run golint and exit on issues
    #   run: |
    #       golint_output=$(golint ./...)
    #       echo "$golint_output"
    #       if [ -n "$golint_output" ]; then
    #         echo "golint found issues"
    #         exit 1
    #       else
    #         echo "No golint issues found"
    #       fi

    # - name: Install staticcheck
    #   run: go install honnef.co/go/tools/cmd/staticcheck@latest

    # - name: RUN staticCHECK in all directories with go.mod
    #   run: |
    #       echo "Current directory: $(pwd)"
    #       echo "Directory contents:"
    #       ls -la
    #       for dir in */ ; do
    #         if [ -f "$dir/go.mod" ]; then
    #           echo "Found go.mod in $dir"
    #           cd "$dir"
    #           staticcheck ./...
    #           cd -
    #         else
    #           echo "No go.mod found in $dir, skipping"
    #         fi
    #       done